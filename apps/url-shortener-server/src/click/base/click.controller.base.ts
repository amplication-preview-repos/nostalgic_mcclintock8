/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ClickService } from "../click.service";
import { ClickCreateInput } from "./ClickCreateInput";
import { Click } from "./Click";
import { ClickFindManyArgs } from "./ClickFindManyArgs";
import { ClickWhereUniqueInput } from "./ClickWhereUniqueInput";
import { ClickUpdateInput } from "./ClickUpdateInput";

export class ClickControllerBase {
  constructor(protected readonly service: ClickService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Click })
  async createClick(@common.Body() data: ClickCreateInput): Promise<Click> {
    return await this.service.createClick({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Click] })
  @ApiNestedQuery(ClickFindManyArgs)
  async clicks(@common.Req() request: Request): Promise<Click[]> {
    const args = plainToClass(ClickFindManyArgs, request.query);
    return this.service.clicks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Click })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async click(
    @common.Param() params: ClickWhereUniqueInput
  ): Promise<Click | null> {
    const result = await this.service.click({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Click })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClick(
    @common.Param() params: ClickWhereUniqueInput,
    @common.Body() data: ClickUpdateInput
  ): Promise<Click | null> {
    try {
      return await this.service.updateClick({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Click })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClick(
    @common.Param() params: ClickWhereUniqueInput
  ): Promise<Click | null> {
    try {
      return await this.service.deleteClick({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
